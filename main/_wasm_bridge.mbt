// DON'T EDIT THIS FILE. IT IS GENERATED BY HEAVEN PACKAGE.
pub struct Receiver {
  buffer : Buffer
  listener_map : Map[String, (@json.JsonValue) -> Unit]
  mut result : @json.JsonValue
}

pub fn h_ss() = "__h" "h_ss"

pub fn h_sd(data : Int) = "__h" "h_sd"

pub fn h_se() = "__h" "h_se"

let receiver : Receiver = {
  buffer: Buffer::new(),
  listener_map: Map::new(),
  result: @json.JsonValue::Null,
}

pub fn h_rs() -> Unit {
  receiver.buffer.reset()
}

pub fn h_rd(data : Int) -> Unit {
  if data != 0 {
    receiver.buffer.write_char(Char::from_int(data))
  }
}

pub fn h_re() -> Unit {
  let message = receiver.buffer.to_string()
  match @json.parse(message)!! {
    Ok(Object({ "type": Some(String(event_type)), "data": Some(event_data) })) =>
      match event_type {
        "result" => receiver.result = event_data
        _ =>
          match receiver.listener_map[event_type] {
            Some(listener) => listener(event_data)
            None => println("No listener for event type: " + event_type)
          }
      }
    Ok(Object({ "type": Some(String("result")) })) =>
      receiver.result = @json.JsonValue::Null
    Ok(json) => println("type and data not found in \(json)")
    Err(e) => println("Error parsing JSON: \(e)")
  }
}

pub fn listen_event(
  event_type : String,
  callback : (@json.JsonValue) -> Unit
) -> Unit {
  receiver.listener_map[event_type] = callback
}

pub fn send_event(
  event_type : String,
  event_data : @json.JsonValue
) -> @json.JsonValue {
  let json = { "type": @json.JsonValue::String(event_type), "data": event_data }
  let body = @json.stringify(@json.JsonValue::Object(json))
  let chars = body.to_array().map(fn(c) { c.to_int() })
  receiver.result = @json.JsonValue::Null
  h_ss()
  chars.each(fn(c) { h_sd(c) })
  h_se()
  return receiver.result
}

pub fn addEventListener(
  objectName : String,
  eventName : String,
  callback : (@json.JsonValue) -> Unit
) -> Unit {
  ignore(
    send_event(
      "\(objectName).addEventListener",
      Array([String(eventName), String("\(objectName).\(eventName)")]),
    ),
  )
  listen_event("\(objectName).\(eventName)", callback)
}
